@page "/after-login"
@using System.Security.Claims
@using FYP.DAL
@using Microsoft.AspNetCore.Authentication
@using Microsoft.EntityFrameworkCore
@using FYP.DAL.Entities
@inject ApplicationDbContext dbcontext
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor

<h3>Redirecting based on role...</h3>

@code {
    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext?.User?.Identity?.IsAuthenticated != true)
        {
            NavManager.NavigateTo("/login", true);
            return;
        }

        var email = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

        if (string.IsNullOrEmpty(email))
        {
            // Missing email claim
            NavManager.NavigateTo("/login", true);
            return;
        }

        var existingUser = await dbcontext.GoogleUsers.FirstOrDefaultAsync(u => u.Email == email);

        if (existingUser == null)
        {
            var name = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
            bool isFirstUser = !await dbcontext.GoogleUsers.AnyAsync();

            var user = new AppUser
                {
                    Name = name,
                    Email = email,
                    Role = isFirstUser ? "Admin" : "User"
                };

            dbcontext.GoogleUsers.Add(user);
            await dbcontext.SaveChangesAsync();
            existingUser = user;
        }

        // Sign in again with DB role
        var claims = new[]
        {
            new Claim(ClaimTypes.NameIdentifier, existingUser.Id.ToString()),
            new Claim(ClaimTypes.GivenName, existingUser.Name),
            new Claim(ClaimTypes.Email, existingUser.Email),
            new Claim(ClaimTypes.Role, existingUser.Role ?? "User")
        };

        var identity = new ClaimsIdentity(claims, AppConstant.AuthScheme);
        var principal = new ClaimsPrincipal(identity);
        await httpContext.SignInAsync(AppConstant.AuthScheme, principal);

        // Redirect based on role
        if (existingUser.Role == "Admin")
        {
            NavManager.NavigateTo("/admindashboard", true);
        }
        else
        {
            NavManager.NavigateTo("/userdashboard", true);
        }
    }
}

@page "/contact-us"
@rendermode InteractiveServer
@using System
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject FYP.BLL.Interfaces.IContactUsService ContactUsService

<style>
    .form-container {
        background: rgba(245, 245, 245, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        border: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05);
        max-width: 600px;
        margin: 2rem auto;
        padding: 2rem;
    }

    .form-label {
        font-weight: 500;
        color: #2d2d2d;
        margin-bottom: 0.5rem;
    }

    .form-control-custom {
        background: rgba(255, 255, 255, 0.9);
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        transition: all 0.3s ease;
        padding: 0.75rem 1rem;
    }

        .form-control-custom:focus {
            background: rgba(255, 255, 255, 0.95);
            border-color: rgba(0, 123, 255, 0.4);
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        }

    .submit-btn {
        background: linear-gradient(135deg, #4a90e2, #3068b3);
        color: white !important;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        letter-spacing: 0.05em;
        transition: all 0.3s ease;
        width: 100%;
    }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.2);
        }

        .submit-btn:active {
            transform: translateY(0);
        }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .success-alert {
        background: rgba(40, 167, 69, 0.95);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1.5rem;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.2);
    }
</style>

<div class="form-container">
    <h3 class="text-center mb-4 display-6 fw-bold text-dark">Contact US</h3>

    <EditForm Model="contactForm" OnValidSubmit="HandleValidSubmit" FormName="ContactForm">
        <AntiforgeryToken />
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <div class="mb-4">
            <label class="form-label">Name</label>
            <InputText @bind-Value="contactForm.Name" class="form-control form-control-custom" />
            <ValidationMessage For="@(() => contactForm.Name)" class="validation-message" />
        </div>

        <div class="mb-4">
            <label class="form-label">Email</label>
            <InputText @bind-Value="contactForm.Email" type="email" class="form-control form-control-custom" />
            <ValidationMessage For="@(() => contactForm.Email)" class="validation-message" />
        </div>

        <div class="mb-4">
            <label class="form-label">Phone Number</label>
            <InputText @bind-Value="contactForm.PhoneNumber" class="form-control form-control-custom" />
            <ValidationMessage For="@(() => contactForm.PhoneNumber)" class="validation-message" />
        </div>

        <div class="mb-4">
            <label class="form-label">Message</label>
            <InputTextArea @bind-Value="contactForm.Message" class="form-control form-control-custom" rows="4" />
            <ValidationMessage For="@(() => contactForm.Message)" class="validation-message" />
        </div>

        <button type="submit" class="submit-btn">
            <i class="fas fa-paper-plane me-2"></i>Send Message
        </button>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="success-alert mt-4">
                <i class="fas fa-check-circle me-2"></i>@successMessage
            </div>
        }
    </EditForm>
</div>

@code {
    private ContactFormModel contactForm = new();
    private string successMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        var entity = new FYP.DAL.Entities.ContactUs
            {
                Name = contactForm.Name,
                Email = contactForm.Email,
                PhoneNumber = contactForm.PhoneNumber,
                Message = contactForm.Message,
                SubmittedAt = DateTime.UtcNow
            };

        await ContactUsService.SaveContactFormAsync(entity);
        successMessage = "Thank you! We'll be in touch soon.";
        contactForm = new ContactFormModel();
    }

    public class ContactFormModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Phone number is required.")]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Message is required.")]
        public string Message { get; set; } = string.Empty;
    }
}
@page "/reviews"
@inject IReviewService ReviewSvc
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer
@using System.Security.Claims

<div class="testimonials-container">
    <div class="floating-shapes">
        <div class="shape"></div>
        <div class="shape"></div>
        <div class="shape"></div>
    </div>

    <div class="page-header">
        <h2 class="page-title">Testimonials</h2>
        <p class="page-subtitle">Discover what our valued customers have to say about their experiences</p>
    </div>

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="toast-success" role="alert">
            <i class="fas fa-check-circle me-2"></i>@SuccessMessage
        </div>
    }

    @if (isAuthenticated)
    {
        <div class="control-section">
            <button class="btn-modern btn-success-modern" @onclick="ToggleForm">
                <i class="fas @(showForm ? "fa-times" : "fa-plus") me-2"></i>@FormToggleText
            </button>
        </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            <i class="fas fa-info-circle me-2"></i>You must log in to submit a review.
        </div>
    }

    @if (showForm)
    {
        <div class="form-card">
            <h5 class="form-title">
                <i class="fas @(currentReview.Id == 0 ? "fa-pen" : "fa-edit") me-2"></i>@FormTitle
            </h5>
            <EditForm Model="@currentReview" OnValidSubmit="ShowSubmitConfirmation">
                <DataAnnotationsValidator />
                <ValidationSummary class="validation-summary" />

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-user me-2"></i>Name
                    </label>
                    <InputText @bind-Value="currentReview.UserName" class="form-control-modern" placeholder="Enter your name" />
                    <ValidationMessage For="@(() => currentReview.UserName)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-star me-2"></i>Rating (1-5)
                    </label>
                    <InputNumber @bind-Value="currentReview.Rating" class="form-control-modern" placeholder="Rate from 1 to 5" />
                    <ValidationMessage For="@(() => currentReview.Rating)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-comment me-2"></i>Comment
                    </label>
                    <InputTextArea @bind-Value="currentReview.Comment" class="form-control-modern" placeholder="Share your experience with us" rows="4" />
                    <ValidationMessage For="@(() => currentReview.Comment)" class="validation-message" />
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn-modern btn-primary-modern">
                        <i class="fas fa-check me-2"></i>@SubmitButtonText
                    </button>
                    <button type="button" class="btn-modern btn-secondary" @onclick="CancelForm" style="background: #6c757d; color: white;">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    }

    <div class="reviews-grid">
        @if (reviews.Any())
        {
            @foreach (var review in reviews)
            {
                <div class="review-card @(HasActions(review) ? "" : "no-actions")" style="animation-delay: @(reviews.IndexOf(review) * 0.1)s">
                    <div class="review-header">
                        <div class="user-avatar">
                            @GetInitials(review.UserName)
                        </div>
                        <div class="user-info">
                            <div style="display: flex; align-items: center; gap: 0.5rem; flex-wrap: wrap;">
                                <h5>@review.UserName</h5>
                                @if (IsRecentReview(review.CreatedAt))
                                {
                                    <span class="review-badge">
                                        <i class="fas fa-clock"></i>New
                                    </span>
                                }
                                @if (IsHighRatedReview(review.Rating))
                                {
                                    <span class="review-badge" style="background: var(--success-gradient);">
                                        <i class="fas fa-star"></i>Top
                                    </span>
                                }
                            </div>
                            <div class="review-timestamp">
                                <i class="fas fa-calendar-alt"></i>
                                <span>@review.CreatedAt.ToString("dd MMM yyyy")</span>
                            </div>
                        </div>
                    </div>

                    <div class="rating-stars">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <span class="star @(i <= review.Rating ? "" : "empty")">@((i <= review.Rating) ? "★" : "☆")</span>
                        }
                    </div>

                    <p class="review-comment">@review.Comment</p>

                    @if (HasActions(review))
                    {
                        <div class="review-actions">
                            <button class="btn-sm-modern btn-primary-modern" @onclick="(() => EditReview(review))">
                                <i class="fas fa-edit me-1"></i>Edit
                            </button>
                            <button class="btn-sm-modern btn-danger-modern" @onclick="(() => ShowDeleteConfirmation(review.Id))">
                                <i class="fas fa-trash me-1"></i>Delete
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="review-stats">
                            <div class="stat-item">
                                <i class="fas fa-thumbs-up"></i>
                                <span>@GetRandomLikes(review.Id)</span>
                            </div>
                            <div class="stat-item">
                                <i class="fas fa-eye"></i>
                                <span>@GetRandomViews(review.Id) views</span>
                            </div>
                            <div class="stat-item">
                                <i class="fas fa-clock"></i>
                                <span>@GetTimeAgo(review.CreatedAt)</span>
                            </div>
                        </div>
                    }

                    @* Optional: Add category tags *@
                    <div class="review-tags">
                        @if (review.Rating >= 4)
                        {
                            <span class="review-tag">Recommended</span>
                        }
                        @if (review.Comment.Length > 100)
                        {
                            <span class="review-tag">Detailed</span>
                        }
                        @if (IsRecentReview(review.CreatedAt))
                        {
                            <span class="review-tag">Recent</span>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">📝</div>
                <h4>No Reviews Yet</h4>
                <p>Be the first to share your experience!</p>
            </div>
        }
    </div>
</div>

@if (showConfirmation)
{
    <div class="modal-modern">
        <div class="modal-content-modern">
            <div class="modal-header-modern">
                <h5 class="modal-title-modern">
                    <i class="fas fa-question-circle me-2"></i>@ConfirmationTitle
                </h5>
                <button type="button" class="btn-close-modern" @onclick="CloseConfirmation">&times;</button>
            </div>
            <div class="modal-body-modern">
                <p>@ConfirmationMessage</p>
            </div>
            <div class="modal-footer-modern">
                <button class="btn-modern" @onclick="CloseConfirmation" style="background: #6c757d; color: white;">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button class="btn-modern btn-primary-modern" @onclick="ConfirmAction">
                    <i class="fas fa-check me-2"></i>Yes
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<Review> reviews = new();
    private Review currentReview = new();
    private bool showForm = false;
    private bool isAuthenticated = false;
    private string currentUserRole = "";
    private string currentUserName = "";

    // Confirmation modal state
    private bool showConfirmation = false;
    private string ConfirmationTitle = "";
    private string ConfirmationMessage = "";
    private Func<Task>? ConfirmAction;

    // Toast success message
    private string SuccessMessage = "";

    private string FormToggleText => showForm ? "Close Form" : "Add Review";
    private string SubmitButtonText => currentReview.Id == 0 ? "Submit Review" : "Update Review";
    private string FormTitle => currentReview.Id == 0 ? "Write a Review" : "Edit Review";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        if (isAuthenticated)
        {
            currentUserRole = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value ?? "User";
            currentUserName = user.Identity?.Name ?? "";
        }

        reviews = await ReviewSvc.GetAllAsync();
    }

    // Helper method to determine if review has actions
    private bool HasActions(Review review)
    {
        return isAuthenticated && (currentUserRole == "Admin" || review.UserName == currentUserName);
    }

    // Helper method to check if review is recent (within last 7 days)
    private bool IsRecentReview(DateTime createdAt)
    {
        return (DateTime.Now - createdAt).TotalDays <= 7;
    }

    // Helper method to check if review is highly rated
    private bool IsHighRatedReview(int rating)
    {
        return rating >= 5;
    }

    // Helper method to get consistent random likes based on review ID
    private int GetRandomLikes(int reviewId)
    {
        var random = new Random(reviewId);
        return random.Next(5, 50);
    }

    // Helper method to get consistent random views based on review ID
    private int GetRandomViews(int reviewId)
    {
        var random = new Random(reviewId + 1000);
        return random.Next(20, 200);
    }

    // Helper method to get time ago string
    private string GetTimeAgo(DateTime createdAt)
    {
        var timeSpan = DateTime.Now - createdAt;

        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays}d ago";
        else if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours}h ago";
        else
            return $"{(int)timeSpan.TotalMinutes}m ago";
    }

    private void ToggleForm()
    {
        showForm = !showForm;
        if (!showForm)
        {
            currentReview = new Review();
        }
    }

    private void EditReview(Review review)
    {
        currentReview = new Review
            {
                Id = review.Id,
                UserName = review.UserName,
                Rating = review.Rating,
                Comment = review.Comment
            };
        showForm = true;
    }

    private Task ShowSubmitConfirmation()
    {
        ConfirmationTitle = currentReview.Id == 0 ? "Confirm Submit" : "Confirm Update";
        ConfirmationMessage = currentReview.Id == 0 ? "Are you sure you want to submit this review?" : "Are you sure you want to update this review?";
        ConfirmAction = SubmitReviewAsync;
        showConfirmation = true;
        return Task.CompletedTask;
    }

    private async Task SubmitReviewAsync()
    {
        if (currentReview.Id == 0)
        {
            currentReview.UserName = currentUserName;
            await ReviewSvc.CreateAsync(currentReview);
            ShowSuccess("Review submitted successfully!");
        }
        else
        {
            await ReviewSvc.UpdateAsync(currentReview);
            ShowSuccess("Review updated successfully!");
        }
        await ReloadReviewsAsync();
        CloseConfirmation();
        CancelForm();
    }

    private void ShowDeleteConfirmation(int id)
    {
        ConfirmationTitle = "Confirm Delete";
        ConfirmationMessage = "Are you sure you want to delete this review?";
        ConfirmAction = () => DeleteReviewAsync(id);
        showConfirmation = true;
    }

    private async Task DeleteReviewAsync(int id)
    {
        await ReviewSvc.DeleteAsync(id);
        await ReloadReviewsAsync();
        ShowSuccess("Review deleted successfully!");
        CloseConfirmation();
    }

    private void CloseConfirmation()
    {
        showConfirmation = false;
        ConfirmAction = null;
    }

    private async Task ReloadReviewsAsync()
    {
        reviews = await ReviewSvc.GetAllAsync();
    }

    private void CancelForm()
    {
        currentReview = new Review();
        showForm = false;
    }

    private string GetInitials(string name)
    {
        var initials = name.Split(' ')
            .Select(n => n.Length > 0 ? n[0] : ' ')
            .Take(2);
        return string.Join("", initials);
    }

    private void ShowSuccess(string message)
    {
        SuccessMessage = message;
        Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => SuccessMessage = ""));
    }
    
}
<style>
    /* Advanced Testimonials Component Styling */

    /* Global Variables */
    :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        --danger-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        --warning-gradient: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
        --glass-bg: rgba(255, 255, 255, 0.08);
        --glass-border: rgba(255, 255, 255, 0.18);
        --backdrop-blur: blur(20px);
        --text-primary: #2d3748;
        --text-secondary: #718096;
        --text-light: #a0aec0;
        --shadow-sm: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-md: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        --shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        --border-radius-sm: 8px;
        --border-radius-md: 12px;
        --border-radius-lg: 16px;
        --border-radius-xl: 24px;
    }

    /* Base Styling */
    .testimonials-container {
        position: relative;
        min-height: 100vh;
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        padding: 2rem;
        overflow: hidden;
    }

        .testimonials-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
            pointer-events: none;
        }

    /* Floating Background Shapes */
    .floating-shapes {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 0;
    }

        .floating-shapes .shape {
            position: absolute;
            border-radius: 50%;
            background: linear-gradient(45deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            backdrop-filter: blur(10px);
            animation: float 20s infinite linear;
        }

            .floating-shapes .shape:nth-child(1) {
                width: 120px;
                height: 120px;
                top: 10%;
                left: 10%;
                animation-delay: 0s;
            }

            .floating-shapes .shape:nth-child(2) {
                width: 80px;
                height: 80px;
                top: 70%;
                right: 20%;
                animation-delay: -10s;
            }

            .floating-shapes .shape:nth-child(3) {
                width: 100px;
                height: 100px;
                bottom: 20%;
                left: 60%;
                animation-delay: -5s;
            }

    @@keyframes float {
        0%, 100%

    {
        transform: translateY(0px) rotate(0deg);
    }

    25% {
        transform: translateY(-20px) rotate(90deg);
    }

    50% {
        transform: translateY(-10px) rotate(180deg);
    }

    75% {
        transform: translateY(-30px) rotate(270deg);
    }

    }

    /* Page Header */
    .page-header {
        position: relative;
        z-index: 1;
        text-align: center;
        margin-bottom: 3rem;
        padding: 2rem 0;
    }

    .page-title {
        font-size: 3.5rem;
        font-weight: 800;
        background: linear-gradient(135deg, #ffffff 0%, #e2e8f0 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 1rem;
        text-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        animation: titleGlow 3s ease-in-out infinite alternate;
    }

    @@keyframes titleGlow {
        0%

    {
        filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.3));
    }

    100% {
        filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.6));
    }

    }

    .page-subtitle {
        font-size: 1.25rem;
        color: rgba(255, 255, 255, 0.8);
        max-width: 600px;
        margin: 0 auto;
        line-height: 1.6;
    }

    /* Glass Card Base */
    .glass-card {
        background: var(--glass-bg);
        backdrop-filter: var(--backdrop-blur);
        border: 1px solid var(--glass-border);
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-xl);
        position: relative;
        overflow: hidden;
    }

        .glass-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        }

    /* Control Section */
    .control-section {
        position: relative;
        z-index: 1;
        margin-bottom: 2rem;
        display: flex;
        justify-content: center;
    }

    /* Modern Buttons */
    .btn-modern {
        position: relative;
        padding: 12px 24px;
        border: none;
        border-radius: var(--border-radius-md);
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: var(--shadow-md);
    }

        .btn-modern::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn-modern:hover::before {
            left: 100%;
        }

    .btn-primary-modern {
        background: var(--primary-gradient);
        color: white;
        transform: translateY(0);
    }

        .btn-primary-modern:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

    .btn-success-modern {
        background: var(--success-gradient);
        color: white;
    }

        .btn-success-modern:hover {
            transform: translateY(-2px) scale(1.02);
            box-shadow: var(--shadow-lg);
        }

    .btn-danger-modern {
        background: var(--danger-gradient);
        color: white;
    }

        .btn-danger-modern:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

    .btn-sm-modern {
        padding: 8px 16px;
        font-size: 0.875rem;
        border-radius: var(--border-radius-sm);
    }

    .btn-secondary {
        background: rgba(108, 117, 125, 0.9);
        color: white;
        backdrop-filter: blur(10px);
    }

    /* Form Card */
    .form-card {
        @@extend .glass-card;
        position: relative;
        z-index: 1;
        padding: 2rem;
        margin-bottom: 2rem;
        background: rgba(255, 255, 255, 0.12);
        animation: slideInUp 0.6s cubic-bezier(0.16, 1, 0.3, 1);
    }

    @@keyframes slideInUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .form-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: white;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
    }

        .form-title i {
            color: #4facfe;
        }

    /* Form Groups */
    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: rgba(255, 255, 255, 0.9);
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
    }

    .form-control-modern {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--border-radius-md);
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        color: white;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .form-control-modern::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .form-control-modern:focus {
            outline: none;
            border-color: #4facfe;
            box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
            background: rgba(255, 255, 255, 0.15);
        }

    /* Reviews Grid */
    .reviews-grid {
        position: relative;
        z-index: 1;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
    }

    /* Review Cards */
    .review-card {
        @@extend .glass-card;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.1);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        animation: fadeInUp 0.6s ease-out forwards;
        opacity: 0;
        transform: translateY(30px);
        display: flex;
        flex-direction: column;
        min-height: 200px;
    }

    @@keyframes fadeInUp {
        to

    {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .review-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(255, 255, 255, 0.1);
        background: rgba(255, 255, 255, 0.15);
    }

    /* Review card variants for better visual consistency */
    .review-card.no-actions {
        position: relative;
    }

        .review-card.no-actions::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--primary-gradient);
            border-radius: 0 0 var(--border-radius-lg) var(--border-radius-lg);
        }

    /* Review Header */
    .review-header {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

    .user-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        color: white;
        margin-right: 1rem;
        box-shadow: var(--shadow-md);
        font-size: 1.1rem;
    }

    .user-info h5 {
        margin: 0;
        color: white;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .user-info .date {
        margin: 0;
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.875rem;
    }

    /* Rating Stars */
    .rating-stars {
        margin-bottom: 1rem;
        display: flex;
        gap: 2px;
    }

    .star {
        font-size: 1.25rem;
        color: #ffd700;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
        animation: starTwinkle 2s ease-in-out infinite;
    }

        .star.empty {
            color: rgba(255, 255, 255, 0.3);
            animation: none;
        }

    @@keyframes starTwinkle {
        0%, 100%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.1);
    }

    }

    /* Review Comment */
    .review-comment {
        color: rgba(255, 255, 255, 0.9);
        line-height: 1.6;
        margin-bottom: 1.5rem;
        font-size: 1rem;
        flex-grow: 1;
        display: flex;
        align-items: center;
    }

    /* Review Actions */
    .review-actions {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        min-height: 36px;
        align-items: center;
        margin-top: auto;
    }

    /* When there are no actions, show engagement stats instead */
    .review-engagement {
        display: flex;
        align-items: center;
        gap: 1rem;
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.875rem;
        min-height: 36px;
    }

    .engagement-item {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.25rem 0.75rem;
        background: rgba(255, 255, 255, 0.08);
        border-radius: var(--border-radius-sm);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }

        .engagement-item:hover {
            background: rgba(255, 255, 255, 0.12);
            transform: translateY(-1px);
        }

        .engagement-item i {
            color: #4facfe;
            font-size: 0.75rem;
        }

    /* Verified badge for reviews */
    .review-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        background: var(--success-gradient);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: var(--border-radius-sm);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: var(--shadow-sm);
    }

    /* Review metadata */
    .review-meta {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 1rem;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .review-timestamp {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.875rem;
    }

    /* Helpful/Like counter for non-authenticated users */
    .review-stats {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-top: auto;
        padding-top: 0.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.875rem;
    }

        .stat-item i {
            color: #4facfe;
        }

    /* Category tags for reviews */
    .review-tags {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
        flex-wrap: wrap;
    }

    .review-tag {
        padding: 0.25rem 0.5rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: var(--border-radius-sm);
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.8);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    /* Alert Styling */
    .alert {
        @@extend .glass-card;
        position: relative;
        z-index: 1;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        border-radius: var(--border-radius-md);
        display: flex;
        align-items: center;
    }

    .alert-warning {
        background: rgba(255, 193, 7, 0.15);
        border: 1px solid rgba(255, 193, 7, 0.3);
        color: #fff3cd;
    }

    /* Toast Success */
    .toast-success {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background: var(--success-gradient);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: var(--border-radius-md);
        box-shadow: var(--shadow-lg);
        animation: slideInRight 0.5s ease-out;
        display: flex;
        align-items: center;
    }

    @@keyframes slideInRight {
        from

    {
        opacity: 0;
        transform: translateX(100%);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    /* Modal Styling */
    .modal-modern {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(5px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2000;
        animation: modalFadeIn 0.3s ease-out;
    }

    @@keyframes modalFadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    .modal-content-modern {
        @@extend .glass-card;
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(20px);
        max-width: 500px;
        width: 90%;
        animation: modalSlideIn 0.3s cubic-bezier(0.16, 1, 0.3, 1);
    }

    @@keyframes modalSlideIn {
        from

    {
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
    }

    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }

    }

    .modal-header-modern {
        padding: 1.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        align-items: center;
        justify-content: between;
    }

    .modal-title-modern {
        margin: 0;
        color: white;
        font-weight: 600;
        flex: 1;
    }

    .btn-close-modern {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.7);
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

        .btn-close-modern:hover {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

    .modal-body-modern {
        padding: 1.5rem;
        color: rgba(255, 255, 255, 0.9);
    }

    .modal-footer-modern {
        padding: 1.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: rgba(255, 255, 255, 0.8);
        grid-column: 1 / -1;
    }

    .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.7;
    }

    .empty-state h4 {
        color: white;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    /* Validation Styling */
    .validation-summary {
        background: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        color: #f8d7da;
        padding: 1rem;
        border-radius: var(--border-radius-md);
        margin-bottom: 1rem;
    }

    .validation-message {
        color: #f8d7da;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    /* Utility Classes */
    .d-flex {
        display: flex;
    }

    .justify-content-between {
        justify-content: space-between;
    }

    .me-1 {
        margin-right: 0.25rem;
    }

    .me-2 {
        margin-right: 0.5rem;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .testimonials-container

    {
        padding: 1rem;
    }

    .page-title {
        font-size: 2.5rem;
    }

    .reviews-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .form-card {
        padding: 1.5rem;
    }

    .modal-content-modern {
        margin: 1rem;
        width: calc(100% - 2rem);
    }

    .btn-modern {
        padding: 10px 20px;
        font-size: 0.9rem;
    }

    }

    @@media (max-width: 480px) {
        .page-title

    {
        font-size: 2rem;
    }

    .page-subtitle {
        font-size: 1rem;
    }

    .review-actions {
        flex-direction: column;
    }

    .modal-header-modern,
    .modal-body-modern,
    .modal-footer-modern {
        padding: 1rem;
    }

    }
</style>
@page "/blogs/edit/{Id:int?}"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.IO
@using FYP.DAL.Entities
@using Microsoft.AspNetCore.Components.Forms
@inject IBlogService BlogService
@inject NavigationManager Nav
@inject IWebHostEnvironment Env

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');

    .form-container {
        background-color: #1a1a1a;
        color: #fff;
        padding: 2rem;
        border-radius: 10px;
        max-width: 800px;
        margin: 2rem auto;
        font-family: 'Inter', sans-serif;
    }

    .form-label {
        color: #e0e0e0;
        font-weight: 600;
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
        letter-spacing: -0.25px;
    }

    .form-control-custom {
        background-color: #2d2d2d;
        border: 1px solid #3d3d3d;
        color: #fff;
        border-radius: 8px;
        padding: 0.85rem 1.25rem;
        transition: all 0.3s ease;
        font-size: 1rem;
        line-height: 1.5;
    }

        .form-control-custom::placeholder {
            color: #7a7a7a;
            font-weight: 400;
        }

        .form-control-custom:focus {
            background-color: #333;
            border-color: #6b46c1;
            box-shadow: 0 0 0 3px rgba(107, 70, 193, 0.25);
        }

    .btn-submit {
        background-color: #6b46c1;
        border: none;
        padding: 0.85rem 2.5rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        font-size: 1rem;
        letter-spacing: -0.25px;
    }

        .btn-submit:hover {
            background-color: #805ad5;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(107, 70, 193, 0.3);
        }

    .file-upload {
        position: relative;
        display: inline-block;
        cursor: pointer;
        margin: 1rem 0;
        width: 100%;
    }

        .file-upload input[type="file"] {
            opacity: 0;
            width: 100%;
            height: 100%;
            position: absolute;
            left: 0;
            top: 0;
            cursor: pointer;
        }

    .file-upload-label {
        background-color: #2d2d2d;
        border: 2px dashed #3d3d3d;
        padding: 1.75rem 2rem;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 1.25rem;
        transition: all 0.3s ease;
        width: 100%;
    }

        .file-upload-label:hover {
            border-color: #6b46c1;
            background-color: #333;
        }

    .upload-icon {
        font-size: 1.75rem;
        color: #6b46c1;
        filter: drop-shadow(0 2px 4px rgba(107, 70, 193, 0.2));
    }

    .upload-text {
        font-weight: 500;
        color: #d1d1d1;
        font-size: 0.95rem;
    }

    .image-preview {
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-top: 1.5rem;
        border: 1px solid #3d3d3d;
    }

    h3 {
        font-weight: 700;
        font-size: 1.75rem;
        letter-spacing: -0.75px;
        color: #f0f0f0;
    }

    .alert-success {
        background: rgba(76, 175, 80, 0.15);
        border: 1px solid #4CAF50;
        color: #a5d6a7;
        font-weight: 500;
    }
</style>

<div class="form-container">
    <h3 class="mb-4">@(Id.HasValue ? "Edit Story" : "Post A Blog")</h3>

    <EditForm Model="blog" OnValidSubmit="HandleValidSubmit" FormName="BlogForm">
        <AntiforgeryToken />
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <div class="mb-4">
            <label class="form-label">Title</label>
            <InputText class="form-control-custom w-100"
                       @bind-Value="blog.Title"
                       placeholder="Craft your headline..." />
            <ValidationMessage For="@(() => blog.Title)" class="text-danger" />
        </div>

        <div class="mb-4">
            <label class="form-label">Content</label>
            <InputTextArea class="form-control-custom w-100"
                           @bind-Value="blog.Content"
                           rows="8"
                           placeholder="Pour your thoughts here..." />
            <ValidationMessage For="@(() => blog.Content)" class="text-danger" />
        </div>

        <div class="mb-4">
            <div class="file-upload">
                <InputFile OnChange="OnInputFileChange" class="form-control-custom" />
                <div class="file-upload-label">
                    <span class="upload-icon">🖼️</span>
                    <span class="upload-text">
                        @if (file != null)
                        {
                            @file.Name
                        }
                        else
                        {
                            <text>Drag & drop or click to upload</text>
                        }
                    </span>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(blog.ImagePath))
            {
                <div class="mt-3">
                    <img src="@blog.ImagePath" class="image-preview" style="max-width: 300px" />
                </div>
            }
        </div>

        <button type="submit" class="btn-submit">
            @(Id.HasValue ? "Save Changes" : "Publish Now")
        </button>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success mt-4 p-3 rounded">
                @successMessage
            </div>
        }
    </EditForm>
</div>

@code {
    [Parameter] public int? Id { get; set; }
    private Blog blog = new();
    private string successMessage = string.Empty;
    private IBrowserFile file;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            blog = await BlogService.GetByIdAsync(Id.Value) ?? new Blog();
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
        var uploads = Path.Combine(Env.WebRootPath, "uploads");
        if (!Directory.Exists(uploads))
            Directory.CreateDirectory(uploads);

        var filename = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
        var fullPath = Path.Combine(uploads, filename);

        await using var fs = File.Create(fullPath);
        await file.OpenReadStream(5_000_000).CopyToAsync(fs);

        blog.ImagePath = $"/uploads/{filename}";
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (Id.HasValue)
            {
                await BlogService.UpdateAsync(blog);
                successMessage = "Updated successfully! Redirecting...";
            }
            else
            {
                await BlogService.CreateAsync(blog);
                successMessage = "Published successfully! Redirecting...";
            }

            await Task.Delay(2000);
            Nav.NavigateTo("/blogs");
        }
        catch
        {
            successMessage = "An error occurred. Please try again.";
        }
    }
}